/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 02:42:39 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import jp.ac.kyoto_su.ise.compressor.BZip2Compressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class BZip2Compressor_ESTest extends BZip2Compressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      // Undeclared exception!
      try { 
        bZip2Compressor0.compress((InputStream) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("$!.?v/ij;.D0sV#4p");
      try { 
        bZip2Compressor0.compress(bufferedInputStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      String string0 = bZip2Compressor0.renameFile(".bz2");
      assertEquals(".bz2.bz2", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("esg/S?");
      bZip2Compressor0.compress(sequenceInputStream0, mockPrintStream0);
  }
}
