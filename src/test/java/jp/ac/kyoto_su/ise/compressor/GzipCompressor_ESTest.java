/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 07:55:52 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import jp.ac.kyoto_su.ise.compressor.GzipCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class GzipCompressor_ESTest extends GzipCompressor_ESTest_scaffolding {

  // @Test(timeout = 4000)
  // public void test0()  throws Throwable  {
  //     GzipCompressor gzipCompressor0 = new GzipCompressor();
  //     InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
  //     doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
  //     OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
  //     // Undeclared exception!
  //     gzipCompressor0.compress(inputStream0, outputStream0);
  // }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        gzipCompressor0.compress((InputStream) null, outputStream0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }

  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".gz");
      mockFileOutputStream0.close();
      try {
        gzipCompressor0.compress(pushbackInputStream0, mockFileOutputStream0);
        fail("Expecting exception: IOException");

      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);

      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      String string0 = gzipCompressor0.renameFile(".gz");
      assertEquals(".gz.gz", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".gz");
      gzipCompressor0.compress(pushbackInputStream0, mockFileOutputStream0);
  }
}
