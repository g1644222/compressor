/*
 * This file was automatically generated by EvoSuite
 * Fri May 22 05:47:31 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import jp.ac.kyoto_su.ise.compressor.Compressor;
import jp.ac.kyoto_su.ise.compressor.GzipCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;


@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)

public class GzipCompressor_ESTest extends GzipCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1350), (-1350), (-3386), (-1)).when(inputStream1).read();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      gzipCompressor0.compress(inputStream1, outputStream0);
      OutputStream outputStream1 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      gzipCompressor0.compress(inputStream0, outputStream1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      gzipCompressor0.renameFile("");
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream1).read();
      OutputStream outputStream1 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      gzipCompressor0.compress(inputStream1, outputStream1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      InputStream inputStream0 = null;
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!

      try {
        gzipCompressor0.compress((InputStream) null, outputStream0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      gzipCompressor0.compress(inputStream0, outputStream0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      String string0 = "(!kF)c/mZ";
      gzipCompressor0.renameFile("(!kF)c/mZ");
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream1).read();
      OutputStream outputStream1 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      gzipCompressor0.compress(inputStream1, outputStream1);
  }
}
