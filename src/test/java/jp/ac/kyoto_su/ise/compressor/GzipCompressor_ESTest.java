/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 02:43:21 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import jp.ac.kyoto_su.ise.compressor.GzipCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class GzipCompressor_ESTest extends GzipCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("bzip2");
      gzipCompressor0.compress(pushbackInputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C:sKG\"M^", false);
      // Undeclared exception!
      try { 
        gzipCompressor0.compress((InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      String string0 = gzipCompressor0.renameFile("Bj\"");
      assertEquals("Bj\".gz", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=WyV5YCkCs>&");
      try { 
        gzipCompressor0.compress(pipedInputStream0, mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
