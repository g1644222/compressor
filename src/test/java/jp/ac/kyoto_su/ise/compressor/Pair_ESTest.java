/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 07:56:48 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Function;
import jp.ac.kyoto_su.ise.compressor.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Object, Object> pair0 = Pair.of((Object) integer0, (Object) integer0);
      BiPredicate<Object, Object> biPredicate0 = (BiPredicate<Object, Object>) mock(BiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(biPredicate0).test(any() , any());
      boolean boolean0 = pair0.test(biPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pair<String, String> pair0 = Pair.of("[^JGHvAF6%#?", "[^JGHvAF6%#?");
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyString());
      Object object0 = pair0.map((BiFunction<String, String, Object>) biFunction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-998));
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      // Undeclared exception!
      try { 
        pair0.test((BiPredicate<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<String, Object> pair0 = Pair.of("y;M;(", (Object) integer0);
      Function<String, String> function0 = (Function<String, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      // Undeclared exception!
      try { 
        pair0.map((Function<String, String>) function0, (Function<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pair<String, String> pair0 = Pair.of("ZF=B%h", "ZF=B%h");
      // Undeclared exception!
      try { 
        pair0.map((BiFunction<String, String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<String, Integer> pair0 = Pair.of(" H9GN+2RdZ<2a", integer0);
      // Undeclared exception!
      try { 
        pair0.accept((BiConsumer<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      Pair<Object, Integer> pair1 = pair0.swap();
      BiPredicate<Object, Integer> biPredicate0 = (BiPredicate<Object, Integer>) mock(BiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(biPredicate0).test(any() , anyInt());
      boolean boolean0 = pair1.test(biPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      pair0.accept(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      Pair<Object, Integer> pair1 = pair0.swap();
      BiFunction<Object, Integer, Object> biFunction0 = (BiFunction<Object, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("ji-dcw/aOUh").when(biFunction0).apply(any() , anyInt());
      Object object0 = pair1.map(biFunction0);
      assertEquals("ji-dcw/aOUh", object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<String, Object> pair0 = Pair.of("y;M;(", (Object) integer0);
      Function<String, String> function0 = (Function<String, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      Function<Object, Object> function1 = (Function<Object, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Pair<String, Object> pair1 = pair0.map((Function<String, String>) function0, (Function<Object, Object>) function1);
      assertNotSame(pair1, pair0);
  }
}
