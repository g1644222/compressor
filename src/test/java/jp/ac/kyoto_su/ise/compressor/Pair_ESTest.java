/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 02:44:00 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Function;
import jp.ac.kyoto_su.ise.compressor.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-655));
      Pair<Object, Object> pair0 = Pair.of((Object) integer0, (Object) integer0);
      BiPredicate<Object, Object> biPredicate0 = (BiPredicate<Object, Object>) mock(BiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(biPredicate0).test(any() , any());
      boolean boolean0 = pair0.test(biPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pair<String, Object> pair0 = Pair.of("", (Object) null);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = pair0.map(biFunction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Object, String> pair0 = Pair.of((Object) integer0, "");
      // Undeclared exception!
      try { 
        pair0.test((BiPredicate<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Object, Integer> pair0 = Pair.of((Object) "L_>|&Ub{Gg<J:oYxw8", integer0);
      Function<Object, Object> function0 = Function.identity();
      // Undeclared exception!
      try { 
        pair0.map(function0, (Function<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        pair0.map((BiFunction<Object, Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Pair<String, Object> pair0 = Pair.of("(J>UmK(b?;P", object0);
      // Undeclared exception!
      try { 
        pair0.accept((BiConsumer<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = Pair.of(object0, object0);
      Pair<Object, Object> pair1 = pair0.swap();
      assertFalse(pair1.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = Pair.of(object0, object0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      pair0.accept(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(766);
      Pair<String, String> pair0 = Pair.of("", "");
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyString() , anyString());
      Object object0 = pair0.map(biFunction0);
      assertEquals(766, object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = Pair.of(object0, object0);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("").when(function1).apply(any());
      Pair<Object, String> pair1 = pair0.map(function0, function1);
      BiPredicate<Object, String> biPredicate0 = (BiPredicate<Object, String>) mock(BiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(biPredicate0).test(any() , anyString());
      boolean boolean0 = pair1.test(biPredicate0);
      assertFalse(boolean0);
  }
}
