/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 02:39:00 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jp.ac.kyoto_su.ise.compressor.Arguments;
import jp.ac.kyoto_su.ise.compressor.BZip2Compressor;
import jp.ac.kyoto_su.ise.compressor.Compressor;
import jp.ac.kyoto_su.ise.compressor.Main;
import jp.ac.kyoto_su.ise.compressor.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Main_ESTest extends Main_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[0];
          Main main0 = new Main(stringArray0);
          Pair<String, String> pair0 = Pair.of("", "");
          // Undeclared exception!
          try { 
            main0.performEach((Compressor) null, pair0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // jp.ac.kyoto_su.ise.compressor.Main.performEach(Main.java:41)
             // sun.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Main main0 = new Main(stringArray0);
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      Pair<String, String> pair0 = Pair.of("1.0.0", "1.0.0");
      main0.performEach(bZip2Compressor0, pair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g)B%Qn<,a";
      stringArray0[1] = "1.0.0";
      stringArray0[2] = "/J5HT6^X],ALv; ";
      stringArray0[3] = "qrDBxdTnMC~x";
      stringArray0[4] = ")";
      Main main0 = new Main(stringArray0);
      Arguments arguments0 = Arguments.parse(stringArray0);
      Compressor compressor0 = arguments0.compressor();
      // Undeclared exception!
      try { 
        main0.performEach(compressor0, (Pair<String, String>) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ECw~e~P$~G\"~ ";
      stringArray0[1] = "org.apache.commons.compress.compressors.CompressorOutputStream";
      stringArray0[2] = "8lc]dJpvd*dViS*pk-";
      stringArray0[3] = "Gf";
      stringArray0[4] = ") > buf.length(";
      stringArray0[5] = "jp.ac.kyoto_su.ise.compressor.Main";
      Main main0 = new Main(stringArray0);
      // Undeclared exception!
      try { 
        main0.perform((Arguments) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Main", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@}";
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // No such file: }
         //
         verifyException("org.kohsuke.args4j.CmdLineParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".gz";
      stringArray0[1] = "-QR";
      stringArray0[2] = "";
      stringArray0[3] = "SAAnX8.Qr0oh-XGvV$";
      Main main0 = null;
      try {
        main0 = new Main(stringArray0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // \"-QR\" is not a valid option
         //
         verifyException("org.kohsuke.args4j.CmdLineParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Main main0 = null;
      try {
        main0 = new Main((String[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // args is null
         //
         verifyException("org.kohsuke.args4j.Utilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[X=nb9))%=y";
      stringArray0[0] = "[X=nb9))%=y";
      Main main0 = new Main(stringArray0);
      Arguments arguments0 = Arguments.parse(stringArray0);
      Compressor compressor0 = arguments0.compressor();
      Pair<String, String> pair0 = Pair.of((String) null, "");
      Pair<String, String> pair1 = pair0.swap();
      // Undeclared exception!
      try { 
        main0.performEach(compressor0, pair1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/| ";
      Main.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Main main0 = new Main(stringArray0);
      Arguments arguments0 = new Arguments();
      main0.perform(arguments0);
      assertTrue(arguments0.needsToHelp());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      try { 
        Main.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kohsuke.args4j.CmdLineParser", e);
      }
  }
}
