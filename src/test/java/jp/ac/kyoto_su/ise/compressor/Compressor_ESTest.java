/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 07:52:32 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import jp.ac.kyoto_su.ise.compressor.BZip2Compressor;
import jp.ac.kyoto_su.ise.compressor.Compressor;
import jp.ac.kyoto_su.ise.compressor.GzipCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class Compressor_ESTest extends Compressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      assertNotNull(bZip2Compressor0);

      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);

      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);

      String string0 = "t+A|%hFTg+p";
      MockFile mockFile0 = new MockFile("t+A|%hFTg+p", "t+A|%hFTg+p");
      assertNotNull(mockFile0);

      mockFileInputStream0.close();
      assertFalse(fileDescriptor0.valid());

      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);

      int int0 = (-4223);
      mockPrintStream0.println((-4223));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("t+A|%hFTg+p", mockFile0.getName());
      assertEquals(6L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/okamototaku/M\u30BB\u30E1\u30B9\u30BF\u30FC1/compressor/compressor/t+A|%hFTg+p/t+A|%hFTg+p", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/Users/okamototaku/M\u30BB\u30E1\u30B9\u30BF\u30FC1/compressor/compressor/t+A|%hFTg+p", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());

      try {
        bZip2Compressor0.compress(mockFileInputStream0, mockPrintStream0);
        fail("Expecting exception: IOException");

      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      assertNotNull(gzipCompressor0);

      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);

      boolean boolean0 = sequenceInputStream0.markSupported();
      assertFalse(boolean0);

      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);

      gzipCompressor0.compress(sequenceInputStream0, byteArrayOutputStream0);
      assertEquals("\u001F\uFFFD\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(20, byteArrayOutputStream0.size());

      gzipCompressor0.compress(sequenceInputStream0, byteArrayOutputStream0);
      assertEquals("\u001F\uFFFD\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001F\uFFFD\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(40, byteArrayOutputStream0.size());

      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());

      String string0 = "j4CQRNDu%zFI!J";
      byteArrayOutputStream0.write(2467);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());

      try {
        Compressor.compressor("j4CQRNDu%zFI!J");
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // j4CQRNDu%zFI!J: compressor not found
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      assertNotNull(bZip2Compressor0);

      String string0 = bZip2Compressor0.renameFile("");
      assertNotNull(string0);
      assertEquals(".bz2", string0);

      String string1 = bZip2Compressor0.renameFile("5l0pz<8)MIJ>u\"a;X");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5l0pz<8)MIJ>u\"a;X.bz2", string1);

      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte)0}, byteArray0);

      MockFile mockFile0 = new MockFile("-C@qQD$'1N~6.sLV/");
      assertNotNull(mockFile0);

      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);

      Locale locale0 = Locale.forLanguageTag(".bz2");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);

      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bZip2Compressor0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "5l0pz<8)MIJ>u\"a;X.bz2", objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals("-C@qQD$'1N~6.sLV", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(22L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("-C@qQD$'1N~6.sLV", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);

      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      assertEquals(3, objectArray0.length);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));

      bZip2Compressor0.drain(byteArrayInputStream0, mockPrintStream1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(mockFile0.isHidden());
      assertEquals("-C@qQD$'1N~6.sLV", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(25L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("-C@qQD$'1N~6.sLV", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte)0}, byteArray0);

      byteArray0[2] = (byte)122;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)31, (byte)122}, byteArray0);

      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);

      // Undeclared exception!
      try {
        bZip2Compressor0.compress(byteArrayInputStream1, filterOutputStream0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      assertNotNull(gzipCompressor0);

      String string0 = gzipCompressor0.renameFile("'?#j?:");
      assertNotNull(string0);
      assertEquals("'?#j?:.gz", string0);

      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        gzipCompressor0.compress(inputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      try {
        Compressor.compressor("");
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // : compressor not found
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      assertNotNull(bZip2Compressor0);

      String string0 = null;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read();
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try {
        bZip2Compressor0.drain(inputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test06()  throws Throwable  {
  //     GzipCompressor gzipCompressor0 = new GzipCompressor();
  //     assertNotNull(gzipCompressor0);
  //
  //     String string0 = "len(";
  //     String string1 = gzipCompressor0.renameFile("len(");
  //     assertNotNull(string1);
  //     assertFalse(string1.equals((Object)string0));
  //     assertEquals("len(.gz", string1);
  //
  //     InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
  //     doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
  //     OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
  //     // Undeclared exception!
  //     gzipCompressor0.compress(inputStream0, outputStream0);
  // }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compressor compressor0 = Compressor.compressor("bzip2");
      assertNotNull(compressor0);

      String string0 = compressor0.renameFile("bzip2");
      assertNotNull(string0);
      assertEquals("bzip2.bz2", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      assertNotNull(bZip2Compressor0);

      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);

      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);

      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1200);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);

      PipedInputStream pipedInputStream0 = new PipedInputStream(1200);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);

      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);

      try {
        bZip2Compressor0.drain(bufferedInputStream0, pipedOutputStream0);
        fail("Expecting exception: IOException");

      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  // @Test(timeout = 4000)
  // public void test09()  throws Throwable  {
  //     GzipCompressor gzipCompressor0 = new GzipCompressor();
  //     gzipCompressor0.renameFile("!*02S~USK=G'J'rNsy");
  //     gzipCompressor0.renameFile("?)");
  //     InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
  //     doReturn((-2412), 2016, 90, 90, (-614)).when(inputStream0).read();
  //     OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
  //     // Undeclared exception!
  //     gzipCompressor0.drain(inputStream0, outputStream0);
  // }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      MockFile mockFile0 = new MockFile("sMt`dgH@.+Yy2f");
      String string0 = gzipCompressor0.renameFile((String) null);
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      String string1 = bZip2Compressor0.renameFile("sMt`dgH@.+Yy2f");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      MockFile mockFile0 = new MockFile("sMt`dgH@.+Yy2f");
      File file0 = MockFile.createTempFile("R;FH", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      file0.mkdir();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      gzipCompressor0.compress(dataInputStream0, mockPrintStream0);
      String string0 = gzipCompressor0.renameFile((String) null);
      assertEquals("null.gz", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compressor compressor0 = Compressor.compressor("bzip2");
      assertNotNull(compressor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      String string0 = bZip2Compressor0.renameFile("");
      bZip2Compressor0.renameFile("");
      String string1 = bZip2Compressor0.renameFile(".bz2");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      Compressor compressor0 = Compressor.compressor("gzip");
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      MockFile mockFile0 = new MockFile("`=7g/vd5P'0.4f,VFy", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ").";
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) compressor0;
      objectArray0[3] = (Object) "`=7g/vd5P'0.4f,VFy";
      objectArray0[4] = (Object) (byte)0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, ").", objectArray0);
      bZip2Compressor0.compress(pushbackInputStream0, printStream0);
      assertEquals(41L, mockFile0.length());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      String string0 = null;
      bZip2Compressor0.renameFile((String) null);
      try {
        Compressor.compressor((String) null);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // null: compressor not found
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }
}
