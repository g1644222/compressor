/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 02:40:28 GMT 2020
 */

package jp.ac.kyoto_su.ise.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import jp.ac.kyoto_su.ise.compressor.BZip2Compressor;
import jp.ac.kyoto_su.ise.compressor.Compressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Compressor_ESTest extends Compressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile("bzip2.bz2", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      bZip2Compressor0.compress(byteArrayInputStream0, mockFileOutputStream0);
      assertEquals(37L, file0.length());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      String string0 = bZip2Compressor0.renameFile("bzip2");
      assertEquals("bzip2.bz2", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 56);
      // Undeclared exception!
      try { 
        bZip2Compressor0.drain((InputStream) null, bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sk&II|[");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        bZip2Compressor0.drain(pipedInputStream0, dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 200);
      // Undeclared exception!
      try { 
        bZip2Compressor0.compress(pushbackInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      try { 
        Compressor.compressor(".gz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // .gz: compressor not found
         //
         verifyException("jp.ac.kyoto_su.ise.compressor.Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compressor compressor0 = Compressor.compressor("gzip");
      assertNotNull(compressor0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compressor compressor0 = Compressor.compressor("bzip2");
      assertNotNull(compressor0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BZip2Compressor bZip2Compressor0 = new BZip2Compressor();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile("bzip2.bz2", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      bZip2Compressor0.drain(byteArrayInputStream0, mockFileOutputStream0);
      assertEquals(1L, file0.length());
  }
}
